<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://learn.lovelace.academy//feed.xml" rel="self" type="application/atom+xml" /><link href="https://learn.lovelace.academy//" rel="alternate" type="text/html" /><updated>2021-11-18T13:44:04+00:00</updated><id>https://learn.lovelace.academy//feed.xml</id><title type="html">Lovelace Academy</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Summary of Components</title><link href="https://learn.lovelace.academy//integrating-cardano/ic01-integration-options/" rel="alternate" type="text/html" title="Summary of Components" /><published>2021-11-18T00:00:00+00:00</published><updated>2021-11-18T00:00:00+00:00</updated><id>https://learn.lovelace.academy//integrating-cardano/ic01-integration-options</id><content type="html" xml:base="https://learn.lovelace.academy//integrating-cardano/ic01-integration-options/">&lt;p&gt;So far, all of our interaction with Cardano has been through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; and a locally running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-node&lt;/code&gt;. While it is perfectly fine for one-off tasks and goals, building products/protocols which require complex interactions entirely in a scripting languages will prove difficult to maintain and scale.&lt;/p&gt;

&lt;h2 id=&quot;a-birds-eye-view&quot;&gt;A Birds Eye View&lt;/h2&gt;

&lt;p&gt;🚧 &lt;em&gt;Overview Diagram coming soon&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-node&lt;/code&gt; as the centrepiece, there are many downstream components utilising the &lt;a href=&quot;https://docs.cardano.org/explore-cardano/cardano-network/networking-protocol#node-to-clientipcoverview&quot;&gt;node-to-client protocol&lt;/a&gt; to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Perform ad-hoc queries through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local-state-query&lt;/code&gt; mini-protocol&lt;/li&gt;
  &lt;li&gt;Submit transactions via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local-tx-submission&lt;/code&gt; mini-protocol&lt;/li&gt;
  &lt;li&gt;Propagate, consume and persist chainDB data through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chain-sync&lt;/code&gt; mini-protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## Typical Use-cases
 🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;## Self-hosted vs External APIs
🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Integrating Cardano" /><summary type="html">So far, all of our interaction with Cardano has been through the cardano-cli and a locally running cardano-node. While it is perfectly fine for one-off tasks and goals, building products/protocols which require complex interactions entirely in a scripting languages will prove difficult to maintain and scale.</summary></entry><entry><title type="html">Querying the Chain</title><link href="https://learn.lovelace.academy//integrating-cardano/ic02-querying-the-chain/" rel="alternate" type="text/html" title="Querying the Chain" /><published>2021-11-18T00:00:00+00:00</published><updated>2021-11-18T00:00:00+00:00</updated><id>https://learn.lovelace.academy//integrating-cardano/ic02-querying-the-chain</id><content type="html" xml:base="https://learn.lovelace.academy//integrating-cardano/ic02-querying-the-chain/">&lt;p&gt;As mentioned previously in the &lt;a href=&quot;https://learn.lovelace.academy/integrating-cardano/summary-of-options/&quot;&gt;Summary of Components&lt;/a&gt;, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; can be difficult to maintain and scale especially if output formats change with newer versions. Further, the ad-hoc querying options in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; are limited to querying the tip of the chain, basic UTxOs, protocol/stake/pool info or exporting the entire ledger state into an extremely large and unruly JSON file.&lt;/p&gt;

&lt;h2 id=&quot;cardano-db-sync&quot;&gt;Cardano db-sync&lt;/h2&gt;

&lt;p&gt;A core component in Cardano is &lt;strong&gt;&lt;a href=&quot;https://github.com/input-output-hk/cardano-db-sync&quot;&gt;cardano-db-sync&lt;/a&gt;&lt;/strong&gt;, a required dependency for almost all components supporting advanced queries over Cardano. This includes &lt;a href=&quot;https://github.com/input-output-hk/cardano-graphql&quot;&gt;cardano-graphql&lt;/a&gt;, &lt;a href=&quot;https://github.com/input-output-hk/cardano-rosetta&quot;&gt;cardano-rosetta&lt;/a&gt;, &lt;a href=&quot;https://github.com/input-output-hk/smash&quot;&gt;SMASH API&lt;/a&gt;, &lt;a href=&quot;https://dandelion.link/&quot;&gt;Dandelion APIs&lt;/a&gt;, &lt;a href=&quot;https://blockfrost.io/&quot;&gt;Blockfrost&lt;/a&gt; and &lt;a href=&quot;https://api.koios.rest/&quot;&gt;Koios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;external-http-apis&quot;&gt;External HTTP APIs&lt;/h2&gt;

&lt;h3 id=&quot;koios&quot;&gt;Koios&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;blockfrost&quot;&gt;Blockfrost&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;cardano-graphql-dandelion-hosted&quot;&gt;Cardano GraphQL (Dandelion hosted)&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Integrating Cardano" /><summary type="html">As mentioned previously in the Summary of Components, using cardano-cli can be difficult to maintain and scale especially if output formats change with newer versions. Further, the ad-hoc querying options in cardano-cli are limited to querying the tip of the chain, basic UTxOs, protocol/stake/pool info or exporting the entire ledger state into an extremely large and unruly JSON file.</summary></entry><entry><title type="html">Building Core Entities</title><link href="https://learn.lovelace.academy//integrating-cardano/ic03-building-core-entities/" rel="alternate" type="text/html" title="Building Core Entities" /><published>2021-11-18T00:00:00+00:00</published><updated>2021-11-18T00:00:00+00:00</updated><id>https://learn.lovelace.academy//integrating-cardano/ic03-building-core-entities</id><content type="html" xml:base="https://learn.lovelace.academy//integrating-cardano/ic03-building-core-entities/">&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; allows us to create many different types of keys, addresses, multisig scripts, token policies, signed certificates and most importantly transactions. However it mainly works with raw unencrypted files in the file system which can be problematic for security and performance.&lt;/p&gt;

&lt;h2 id=&quot;cardano-cli-wrappers&quot;&gt;Cardano CLI Wrappers&lt;/h2&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;language-specific-sdks&quot;&gt;Language-specific SDKs&lt;/h2&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes-on-key-management&quot;&gt;Notes on Key Management&lt;/h2&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Integrating Cardano" /><summary type="html">The cardano-cli allows us to create many different types of keys, addresses, multisig scripts, token policies, signed certificates and most importantly transactions. However it mainly works with raw unencrypted files in the file system which can be problematic for security and performance.</summary></entry><entry><title type="html">Building and Submitting Transactions</title><link href="https://learn.lovelace.academy//integrating-cardano/ic04-building-and-submitting-transactions/" rel="alternate" type="text/html" title="Building and Submitting Transactions" /><published>2021-11-18T00:00:00+00:00</published><updated>2021-11-18T00:00:00+00:00</updated><id>https://learn.lovelace.academy//integrating-cardano/ic04-building-and-submitting-transactions</id><content type="html" xml:base="https://learn.lovelace.academy//integrating-cardano/ic04-building-and-submitting-transactions/">&lt;p&gt;As explained previously in &lt;a href=&quot;https://learn.lovelace.academy/getting-started/transactions-utxo-and-metadata/&quot;&gt;Transactions: UTxO and Metadata
&lt;/a&gt;, although transactions can be built, signed and submitted using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt;, each of these steps can also be handled using different SDKs and APIs.&lt;/p&gt;

&lt;h2 id=&quot;building-and-signing-transactions&quot;&gt;Building and Signing Transactions&lt;/h2&gt;

&lt;h3 id=&quot;serialisation-lib&quot;&gt;Serialisation Lib&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;cardanosharp-sdk&quot;&gt;CardanoSharp SDK&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;submitting-transactions&quot;&gt;Submitting Transactions&lt;/h2&gt;

&lt;h3 id=&quot;blockfrost-api&quot;&gt;Blockfrost API&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;submit-api-dandelion-hosted&quot;&gt;Submit API (Dandelion hosted)&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;ogmios-dandelion-hosted&quot;&gt;Ogmios (Dandelion hosted)&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;cardano-graphql-dandelion-hosted&quot;&gt;Cardano GraphQL (Dandelion hosted)&lt;/h3&gt;
&lt;p&gt;🚧 &lt;em&gt;More content coming soon&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="Integrating Cardano" /><summary type="html">As explained previously in Transactions: UTxO and Metadata , although transactions can be built, signed and submitted using the cardano-cli, each of these steps can also be handled using different SDKs and APIs.</summary></entry><entry><title type="html">Why Cardano</title><link href="https://learn.lovelace.academy//getting-started/gs01-why-cardano/" rel="alternate" type="text/html" title="Why Cardano" /><published>2021-11-16T00:00:00+00:00</published><updated>2021-06-07T00:00:00+00:00</updated><id>https://learn.lovelace.academy//getting-started/gs01-why-cardano</id><content type="html" xml:base="https://learn.lovelace.academy//getting-started/gs01-why-cardano/">&lt;p&gt;The world is starting to understand the implications of Blockchain’s 
disruptive technology and its decentralised socioeconomic movement twelve and a half years
after &lt;a href=&quot;https://www.blockchain.com/btc/block/00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048&quot;&gt;Bitcoin’s first block&lt;/a&gt;.
Since then, the Blockchain industry has surpassed a &lt;strong&gt;$2.8 Trillion&lt;/strong&gt; dollar market cap on the back of major advancements in its technological underpinnings, the mainstream adoption of cryptocurrencies as the frictionless payment rails of the internet, its acceptance as an inflation-hedge asset class with huge asymmetric potential, and the tremendous growth in the number of &lt;a href=&quot;https://blockchainhub.net/web3-decentralized-web/&quot;&gt;next generation products/services&lt;/a&gt; built on top of its infrastructure.&lt;/p&gt;

&lt;p&gt;To dig deeper into the technical foundations and benefits of Blockchain, please refer to our video &lt;a href=&quot;https://www.youtube.com/watch?v=ev75v-9LU5I&quot;&gt;Making Sense of Blockchain&lt;/a&gt; (we strongly recommend watching it on a large screen).&lt;/p&gt;

&lt;h2 id=&quot;huge-opportunities-ahead&quot;&gt;Huge Opportunities Ahead&lt;/h2&gt;
&lt;p&gt;There has not been this level of opportunity since the the mainstream adoption of the internet. Never before has the &lt;strong&gt;entire world&lt;/strong&gt; had &lt;strong&gt;equal access&lt;/strong&gt; to a common financial layer, a trusted and resilient network of value not controlled by a central intermediary that is prone to corruption, mismanagement or exploitative behaviour. A global network powered by the people themselves, where everyone can have an economic identity with unfettered access to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reliable and transparent financial services&lt;/li&gt;
  &lt;li&gt;Seamless global trade and commerce&lt;/li&gt;
  &lt;li&gt;Irrefutable recordkeeping of ownership, transfers of value and other key facts&lt;/li&gt;
  &lt;li&gt;Interoperable and composable platforms for media, gaming and interactive experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this open ecosystem we now have the power to build more fair and transparent systems, where everyone owns their personal data and builds closer connections to one another.&lt;/p&gt;

&lt;p&gt;Further, even with the explosion of innovation in this space it is &lt;strong&gt;still early&lt;/strong&gt; to be a pioneering builder. A simple investment might have achieved great returns in the beginning of this industry, but far greater potential lie ahead for those delivering the &lt;a href=&quot;https://blockchainhub.net/web3-decentralized-web/&quot;&gt;Web3-powered products/services&lt;/a&gt; for the global audience of billions. The upfront investment in your time to build on this new stack will yield enormous returns in the coming years.&lt;/p&gt;

&lt;h2 id=&quot;why-build-on-cardano&quot;&gt;Why Build on Cardano&lt;/h2&gt;

&lt;p&gt;On top of the amazing opportunity for growth is the unique opportunity to build on top of the strongest foundations in the Blockchain space. Cardano was designed and built carefully for long-term sustainability with a passionate community and hyper-productive team propelling it forward. It is the next evolution of Blockchain technology with the goal
to provide a more &lt;strong&gt;scalable&lt;/strong&gt;, &lt;strong&gt;inclusive&lt;/strong&gt; and &lt;strong&gt;sustainable&lt;/strong&gt; 
financial system that scales for global use.&lt;/p&gt;

&lt;p&gt;Based on &lt;a href=&quot;https://iohk.io/en/research/library/&quot;&gt;published peer-reviewed research&lt;/a&gt; in collaboration with the world’s top universities and academic minds, their latest advancements follow a methodical path from academic proofs to formal specifications and finally to robust software that can be proven to work as intended.&lt;/p&gt;

&lt;p&gt;This well-established path from research to engineering and product development uniquely sets Cardano apart amongst the world’s top blockchain platforms, while permitting innovation at scale without compromising on energy requirements, security or decentralisation.&lt;/p&gt;

&lt;p&gt;We summarised Cardano’s key strengths in our video &lt;a href=&quot;https://www.youtube.com/watch?v=sM0_V53_kGo&quot;&gt;The Cardano Revolution&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Strongest foundations with the future in mind&lt;/li&gt;
  &lt;li&gt;Incredible team behind the most actively developed blockchain&lt;/li&gt;
  &lt;li&gt;Passionate, intelligent and thoughtful community&lt;/li&gt;
  &lt;li&gt;Cardano’s &lt;a href=&quot;https://www.youtube.com/watch?v=l_Nv0-PVrnM&quot;&gt;unique vision&lt;/a&gt; for economic identity, inclusion and long-term sustainability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cardanos-world-beating-metrics&quot;&gt;Cardano’s World-beating Metrics&lt;/h2&gt;
&lt;p&gt;Cardano has some of the most impressive metrics in the Blockchain space and the data indicates that its flourishing network is growing stronger with time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The most decentralised blockchain platform
    &lt;ul&gt;
      &lt;li&gt;3,000+ stake pools &lt;a href=&quot;https://adatools.io/hologram&quot;&gt;distributed globally&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2,000,000+ &lt;a href=&quot;https://twitter.com/Cardano/status/1455310221396611072&quot;&gt;wallets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;940,000+ &lt;a href=&quot;https://pooltool.io/&quot;&gt;staking addresses&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;72.2%+ of &lt;a href=&quot;https://pooltool.io/&quot;&gt;total supply staked&lt;/a&gt; ($40B+ USD)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Second most active blockchain by &lt;a href=&quot;https://messari.io/asset/cardano/metrics/network-activity&quot;&gt;transaction volume&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;$12,000,000,000+ ($12B) USD per day&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The most actively developed blockchain by GitHub commits&lt;/li&gt;
  &lt;li&gt;Has the &lt;a href=&quot;https://forum.cardano.org/t/project-catalyst-fund6-voting-results-official/82084&quot;&gt;world’s largest Decentralised Autonomous Organisation&lt;/a&gt; (DAO)
    &lt;ul&gt;
      &lt;li&gt;$1,500,000,000+ ($1.5B) USD in the treasury&lt;/li&gt;
      &lt;li&gt;Governance built-in to the protocol&lt;/li&gt;
      &lt;li&gt;44,500+ unique wallets participating&lt;/li&gt;
      &lt;li&gt;903,000 votes cast to date&lt;/li&gt;
      &lt;li&gt;305+ projects funded to date&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📝 &lt;em&gt;Metrics updated 2021-11-09T15:00:00Z&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;join-the-cardano-revolution&quot;&gt;Join the Cardano Revolution&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/cardano-ecosystem.png&quot; alt=&quot;&quot; /&gt;
Image courtesy of &lt;a href=&quot;https://poolg.de/Eco/CardanoEcosystemMap.html&quot;&gt;Pool Germany [POOLG]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn how you can start building on Cardano by &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/starting-your-journey&quot;&gt;Starting Your Journey ➡️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">The world is starting to understand the implications of Blockchain’s disruptive technology and its decentralised socioeconomic movement twelve and a half years after Bitcoin’s first block. Since then, the Blockchain industry has surpassed a $2.8 Trillion dollar market cap on the back of major advancements in its technological underpinnings, the mainstream adoption of cryptocurrencies as the frictionless payment rails of the internet, its acceptance as an inflation-hedge asset class with huge asymmetric potential, and the tremendous growth in the number of next generation products/services built on top of its infrastructure.</summary></entry><entry><title type="html">Starting Your Journey</title><link href="https://learn.lovelace.academy//getting-started/gs02-starting-your-journey/" rel="alternate" type="text/html" title="Starting Your Journey" /><published>2021-11-16T00:00:00+00:00</published><updated>2021-06-08T00:00:00+00:00</updated><id>https://learn.lovelace.academy//getting-started/gs02-starting-your-journey</id><content type="html" xml:base="https://learn.lovelace.academy//getting-started/gs02-starting-your-journey/">&lt;p&gt;Navigating any Blockchain ecosystem to figure out how to participate can be a daunting task, so we prepared this guide for newcomers get started with Cardano. We recommend the following starting points which do a fantastic job aggregating a multitude of useful resources:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Cardano_ELI5/wiki/index#wiki_getting_started_with_cardano&quot;&gt;&lt;strong&gt;Getting Started With Cardano&lt;/strong&gt;&lt;/a&gt; from Reddit &lt;a href=&quot;https://www.reddit.com/r/Cardano_ELI5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r/Cardano_ELI5&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/input-output-hk/essential-cardano/blob/main/essential-cardano-list.md&quot;&gt;&lt;strong&gt;Essential Cardano&lt;/strong&gt;&lt;/a&gt; from the &lt;a href=&quot;https://github.com/input-output-hk&quot;&gt;IOHK GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.cardano.org/&quot;&gt;&lt;strong&gt;Cardano Developer Portal&lt;/strong&gt;&lt;/a&gt; The Official Portal for Developers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;everyone-can-participate&quot;&gt;Everyone Can Participate&lt;/h2&gt;
&lt;p&gt;It is a common misconception that Cardano has a steep learning curve and further, in-depth technical knowledge is required to play a role in Cardano’s flourishing ecosystem. In fact, there are many roles for anyone wishing to participate and one or more of these could apply to you.&lt;/p&gt;

&lt;h3 id=&quot;investor&quot;&gt;Investor&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Basic Investor/Trader: Holds ADA on an &lt;a href=&quot;https://coinmarketcap.com/currencies/cardano/markets/&quot;&gt;exchange&lt;/a&gt; and prays for price appreciation&lt;/li&gt;
  &lt;li&gt;Network Participant: Holds ADA on a personal wallet, participates in decentralisation through staking and earning additional ADA (approx. 5% APY) every five days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;community-member&quot;&gt;Community Member&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Informed Supporter: &lt;a href=&quot;https://github.com/input-output-hk/essential-cardano/blob/main/essential-cardano-list.md&quot;&gt;Understands the ecosystem&lt;/a&gt;, uses Cardano products/protocols (aka services) and holds one or more of its &lt;a href=&quot;https://pool.pm/tokens&quot;&gt;1,869,057 Native Tokens (as of Nov-2021)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Governance Participant: &lt;a href=&quot;https://cardano.org/governance/&quot;&gt;Governance&lt;/a&gt; Voter/Contributor and earns ADA voting for the future of Cardano&lt;/li&gt;
  &lt;li&gt;Protocol Evolution Contributor: Raises proposals and participates in future protocol decision and standards discussions through &lt;a href=&quot;https://cips.cardano.org/&quot;&gt;CIPs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;builder&quot;&gt;Builder&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Stake Pool Operator (SPO): Manages secure and reliable infrastructure to host a block-producing &lt;a href=&quot;https://github.com/input-output-hk/cardano-node/&quot;&gt;cardano-node&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Infrastructure and Integration Developer: Builds Off-chain integration pieces e.g. APIs, SDKs, CLIs, etc.&lt;/li&gt;
  &lt;li&gt;DApp Developer: Builds On-chain Smart Contracts and Off-chain integration for a specific product/protocol&lt;/li&gt;
  &lt;li&gt;Utility Developer: Builds wallets, block explorers and utility tools&lt;/li&gt;
  &lt;li&gt;NFT Content Creator: Creates Digital Media and Tokenises it as a Cardano Native Asset&lt;/li&gt;
  &lt;li&gt;Graphics/UX Designer for Cardano products/protocols&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📝 &lt;em&gt;With that in mind, Lovelace Academy as an education platform is mostly geared to the builders of Cardano so most of the subsequent content will be &lt;strong&gt;technical&lt;/strong&gt; in nature.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-paradigm-shift-for-builders&quot;&gt;A Paradigm Shift for Builders&lt;/h2&gt;
&lt;p&gt;As Blockchain sits at the intersection of cryptography, computer science, distributed systems and economics beginners might be overwhelmed with the amount of knowledge required to understand each field. However, do not fear! You do not need to be such an advanced polymath to start building something on Cardano. In fact, you can already begin your journey with a basic understanding of software development.&lt;/p&gt;

&lt;h3 id=&quot;key-differences-vs-traditional-software-development&quot;&gt;Key Differences vs Traditional Software Development&lt;/h3&gt;
&lt;p&gt;As a developer you will be familiar with the client-server paradigm where clients/frontends interact with remote servers managed by a central organisation. These remote servers almost always sit on top of distributed databases and interact with other servers within their closed network. As a result the data, connectivity and interactions become centralised and isolated in large silos across the internet.&lt;/p&gt;

&lt;p&gt;Blockchain and Web3 democratises and opens up that paradigm so that all the data is replicated within an open network, where everyone can run the servers themselves in the form of full nodes. Here is a summary of the key differences:&lt;/p&gt;

&lt;h4 id=&quot;ownership-of-data&quot;&gt;Ownership of Data&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Owned by participants of the open blockchain network&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;infrastructure-and-data-integrity&quot;&gt;Infrastructure and Data Integrity&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Everyone connects to a resilient network of full nodes&lt;/li&gt;
  &lt;li&gt;Everyone can run a full node&lt;/li&gt;
  &lt;li&gt;Every full node synchronises a full copy of the database with its peers&lt;/li&gt;
  &lt;li&gt;Every full node validates the integrity of the data using cryptography&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;updating-data&quot;&gt;Updating Data&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;To update any data we must submit a transaction (Tx)&lt;/li&gt;
  &lt;li&gt;Every Tx has a fee in ADA based on its payload&lt;/li&gt;
  &lt;li&gt;Everyone can submit a Tx as long as the accounting/cryptographic/smart contract validation succeeds&lt;/li&gt;
  &lt;li&gt;Every Tx propagates through the network of full nodes after submission in a &lt;em&gt;pending&lt;/em&gt; state&lt;/li&gt;
  &lt;li&gt;Pending Txs are batched into Blocks committed by Stake Pools at a regular interval&lt;/li&gt;
  &lt;li&gt;Everyone can participate in the Proof-of-Stake consensus to commit new Blocks (i.e. be a SPO) and be rewarded for doing so&lt;/li&gt;
  &lt;li&gt;Tx finalisations are not immediate. A by-product of eventual consistency in distributed systems with additional protection against invalid forks&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;computation-and-storage&quot;&gt;Computation and Storage&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;On-chain computation (i.e. Executing Smart Contracts) has compute/time &amp;amp; storage/space costs&lt;/li&gt;
  &lt;li&gt;On-chain computation can only work with data that exists on-chain (i.e. No integration outside the Blockchain itself apart from Oracle-inserted data)&lt;/li&gt;
  &lt;li&gt;On-chain storage of &lt;em&gt;additional&lt;/em&gt; data comes at a cost (e.g. metadata)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;technical-limitations&quot;&gt;Technical Limitations?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The benefits of decentralisation and having an open and trusted global network of value &lt;strong&gt;far outweighs&lt;/strong&gt; the raw technical limitations (e.g. limited throughput &amp;amp; storage) of the base layer&lt;/li&gt;
  &lt;li&gt;Scaling solutions are already on the way&lt;/li&gt;
  &lt;li&gt;Blockchains or distributed ledgers are meant to complement, not replace traditional IT infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;run-your-own-full-cardano-node&quot;&gt;Run Your Own Full Cardano Node&lt;/h2&gt;
&lt;p&gt;Now that you learnt about full nodes, continue to &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/running-a-full-node/&quot;&gt;Running a Full Node ➡️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">Navigating any Blockchain ecosystem to figure out how to participate can be a daunting task, so we prepared this guide for newcomers get started with Cardano. We recommend the following starting points which do a fantastic job aggregating a multitude of useful resources: Getting Started With Cardano from Reddit r/Cardano_ELI5 Essential Cardano from the IOHK GitHub Cardano Developer Portal The Official Portal for Developers</summary></entry><entry><title type="html">Running a Full Cardano Node</title><link href="https://learn.lovelace.academy//getting-started/gs03-running-a-full-node/" rel="alternate" type="text/html" title="Running a Full Cardano Node" /><published>2021-11-16T00:00:00+00:00</published><updated>2021-06-09T00:00:00+00:00</updated><id>https://learn.lovelace.academy//getting-started/gs03-running-a-full-node</id><content type="html" xml:base="https://learn.lovelace.academy//getting-started/gs03-running-a-full-node/">&lt;p&gt;As a developer the best starting point to Cardano is to get a good
understanding of the Cardano node. This knowledge is essential whether
you want to build DApps, wallets, integration tools, mint custom tokens
or operate your own stake pool. As mentioned in the previous article, 
the full node is open for everyone to run and we strongly encourage every developer to learn how to do it.&lt;/p&gt;

&lt;p&gt;We will break it down in five basic steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set up your Linux environment&lt;/li&gt;
  &lt;li&gt;Clone and build cardano-node&lt;/li&gt;
  &lt;li&gt;Configure the node&lt;/li&gt;
  &lt;li&gt;Running and monitoring the node&lt;/li&gt;
  &lt;li&gt;Interacting with the node using cardano-cli&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;goals&quot;&gt;Goals&lt;/h3&gt;
&lt;p&gt;After following the instructions in this post you will be able to run a full Cardano node, synchronise with the rest of the network and integrate with it via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; and querying its internal metrics.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;A machine with at least 8GB RAM and 64GB free disk space.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;The Cardano node is a full node which contains the entire blockchain
since its genesis and acts as the main point of contact from you as
a client to the rest of the nodes in the network. Its main
responsibilities are to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uphold the Ouroboros consensus algorithm&lt;/li&gt;
  &lt;li&gt;Maintain the ledger and accounting model&lt;/li&gt;
  &lt;li&gt;Expose integration points for clients and nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/node_cardano_components_version_main.png&quot; alt=&quot;&quot; /&gt;
Image courtesy of &lt;a href=&quot;https://docs.cardano.org/explore-cardano/cardano-architecture/overview#gatsby-focus-wrapper&quot;&gt;Cardano docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we build the &lt;a href=&quot;https://github.com/input-output-hk/cardano-node/&quot;&gt;cardano-node&lt;/a&gt; project it will produce two binary executables,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-node&lt;/code&gt; (server) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; (CLI client).&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-linux-environment&quot;&gt;Set up Your Linux Environment&lt;/h2&gt;

&lt;p&gt;At the time of writing, setting up your Cardano development environment
in Ubuntu 20.04 is the easiest and most well-documented approach. There
are a few ways to do so.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run Ubuntu as the default OS or dual boot it on your device&lt;/li&gt;
  &lt;li&gt;Run Ubuntu as a local VM (&lt;a href=&quot;https://www.youtube.com/watch?v=BatrK6G8j4M&quot;&gt;Windows&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=Hzji7w882OY&quot;&gt;macOS&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Run Ubuntu on a cloud VM and SSH &lt;a href=&quot;https://github.com/LovelaceAcademy/CardanoDevBox&quot;&gt;(Windows, macOS, Linux)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run Ubuntu using WSL2 (&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are pros and cons to each of these options but the most important
outcome is having a &lt;strong&gt;repeatable&lt;/strong&gt; and &lt;strong&gt;reliable&lt;/strong&gt; way of setting up
your environment from scratch. This will give you confidence in spinning
up a node as required across different networks and purposes.&lt;/p&gt;

&lt;h3 id=&quot;install-core-dependencies&quot;&gt;Install Core Dependencies&lt;/h3&gt;

&lt;p&gt;There are several core dependencies to install via APT before you can
build cardano-node.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git jq wget curl bc make automake g++ build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev libncursesw5 libncurses-dev libtinfo5 libtool autoconf htop net-tools chrony prometheus-node-exporter &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-cabal-ghc-and-libsodium&quot;&gt;Install Cabal, GHC and Libsodium&lt;/h3&gt;

&lt;p&gt;Once the core dependencies are installed we will move on to installing
Cabal (the Haskell build orchestrator), GHC (the Haskell compiler) and
Libsodium (the cryptography library).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Cabal&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/setup/cabal
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/setup/cabal
wget https://downloads.haskell.org/cabal/cabal-install-3.4.0.0/cabal-install-3.4.0.0-x86_64-ubuntu-16.04.tar.xz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; cabal-install-3.4.0.0-x86_64-ubuntu-16.04.tar.xz
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.local/bin
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;cabal ~/.local/bin/
~/.local/bin/cabal update
~/.local/bin/cabal user-config update
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/overwrite-policy:/overwrite-policy: always/g'&lt;/span&gt; ~/.cabal/config

&lt;span class=&quot;c&quot;&gt;# GHC&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/setup/ghc
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/setup/ghc
wget https://downloads.haskell.org/~ghc/8.10.4/ghc-8.10.4-x86_64-deb10-linux.tar.xz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; ghc-8.10.4-x86_64-deb10-linux.tar.xz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ghc-8.10.4
./configure
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Libsodium&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/git
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/
git clone https://github.com/input-output-hk/libsodium
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libsodium
git checkout 66f017f1
./autogen.sh
./configure
make
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install
export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/lib:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/lib/pkgconfig:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;clone-and-build-cardano-node&quot;&gt;Clone and build cardano-node&lt;/h2&gt;

&lt;p&gt;Now we can clone the
&lt;a href=&quot;https://github.com/input-output-hk/cardano-node&quot;&gt;cardano-node&lt;/a&gt;
repository, retrieve the latest tagged version and build it.
This process takes between 10-30 mins depending on your machine 
so feel free to grab some tea, coffee and/or snacks.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git
git clone https://github.com/input-output-hk/cardano-node.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cardano-node
git fetch &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recurse-submodules&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
git checkout &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://api.github.com/repos/input-output-hk/cardano-node/releases/latest | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .tag_name&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
cabal configure &lt;span class=&quot;nt&quot;&gt;--with-compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ghc-8.10.4
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;package cardano-crypto-praos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; flags: -external-libsodium-vrf&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; cabal.project.local
~/.local/bin/cabal build all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;📝 &lt;em&gt;To update an existing node please verify prereqs in &lt;a href=&quot;https://github.com/input-output-hk/cardano-node/releases&quot;&gt;cardano-node Releases&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once that is completed, copy the built binaries to ~/.local/bin 
which will be part of the executable path.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./scripts/bin-path.sh cardano-node&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ~/.local/bin/
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./scripts/bin-path.sh cardano-cli&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ~/.local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;post-build-scripts&quot;&gt;Post-build Scripts&lt;/h3&gt;

&lt;p&gt;For convenience it also makes sense to add amend the existing
environment variables to be loaded automatically.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;postbuild&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;postbuild0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#postbuild0&quot; id=&quot;postbuild0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;postbuild1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#postbuild1&quot; id=&quot;postbuild1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;postbuildContent&quot;&gt;&lt;div aria-labelledby=&quot;postbuild0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;postbuild0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export LD_LIBRARY_PATH=&quot;/usr/local/lib:$LD_LIBRARY_PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PKG_CONFIG_PATH=&quot;/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;~/.cabal/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;~/.local/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export NODE_HOME=&quot;$HOME/testnet-node&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export CARDANO_NODE_SOCKET_PATH=&quot;$HOME/testnet-node/socket/node.socket&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;postbuild1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;postbuild1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export LD_LIBRARY_PATH=&quot;/usr/local/lib:$LD_LIBRARY_PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PKG_CONFIG_PATH=&quot;/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;~/.cabal/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;~/.local/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export NODE_HOME=&quot;$HOME/node&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export CARDANO_NODE_SOCKET_PATH=&quot;$HOME/node/socket/node.socket&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;shortcut-1-an-init-script&quot;&gt;Shortcut #1: An Init Script&lt;/h2&gt;
&lt;p&gt;To save time from having to run these commands one-by-one, you can simply use our existing &lt;a href=&quot;https://raw.githubusercontent.com/LovelaceAcademy/CardanoDevBox/main/init.sh&quot;&gt;init.sh&lt;/a&gt; and run it all (i.e. install dependencies, clone+build, configure) with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/LovelaceAcademy/CardanoDevBox/main/init.sh
bash init.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;📝 &lt;em&gt;Note that it is configured (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configure the Node&lt;/code&gt; below) for the testnet, but the mainnet versions of the commands are commented out. Comment/uncomment the testnet/mainnet versions to configure the desired environment&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;shortcut-2-download-the-binaries&quot;&gt;Shortcut #2: Download the Binaries&lt;/h2&gt;
&lt;p&gt;You can alternatively download the latest versions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-node&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hydra.iohk.io/build/7739415/download/1/cardano-node-1.30.1-linux.tar.gz&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hydra.iohk.io/build/7739339/download/1/cardano-node-1.30.1-win64.zip&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hydra.iohk.io/build/7739444/download/1/cardano-node-1.30.1-macos.tar.gz&quot;&gt;MacOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After downloading you can simply extract the binaries and add them to your PATH. In the case of Ubuntu you can run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.local/setup/cardano-node-1.30.1
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.local/setup/cardano-node-1.30.1
wget https://hydra.iohk.io/build/7739415/download/1/cardano-node-1.30.1-linux.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt; cardano-node-1.30.1-linux.tar.gz
&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;cardano-node-1.30.1-linux.tar.gz
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.local/bin
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;cardano-cli cardano-node ~/.local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;📝 &lt;em&gt;Note you will still need to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post-build Scripts&lt;/code&gt; for the desired environment above to add the binaries to your PATH and ensure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; communicates to the right Unix domain socket&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-the-node&quot;&gt;Configure the Node&lt;/h2&gt;

&lt;p&gt;Your Cardano node needs to be configured correctly to connect to
a Cardano network, and this is determined by four JSON configuration
files. We will focus on the testnet first.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;config&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;config0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#config0&quot; id=&quot;config0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;config1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#config1&quot; id=&quot;config1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;configContent&quot;&gt;&lt;div aria-labelledby=&quot;config0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;config0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/testnet-node/config
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/testnet-node/socket
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/testnet-node/config
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; config.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-config.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; bgenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-byron-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; sgenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-shelley-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; agenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-alonzo-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; topology.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/testnet-topology.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&quot;TraceBlockFetchDecisions&quot;: false/&quot;TraceBlockFetchDecisions&quot;: true/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/testnet-shelley-genesis/sgenesis/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/testnet-byron-genesis/bgenesis/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/testnet-alonzo-genesis/agenesis/g'&lt;/span&gt; config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;config1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;config1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/node/config
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/node/socket
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/node/config
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; config.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/mainnet-config.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; bgenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/mainnet-byron-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; sgenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/mainnet-shelley-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; agenesis.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/mainnet-alonzo-genesis.json
wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; topology.json https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/mainnet-topology.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&quot;TraceBlockFetchDecisions&quot;: false/&quot;TraceBlockFetchDecisions&quot;: true/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/mainnet-shelley-genesis/sgenesis/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/mainnet-byron-genesis/bgenesis/g'&lt;/span&gt; config.json
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/mainnet-alonzo-genesis/agenesis/g'&lt;/span&gt; config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-and-monitoring-the-node&quot;&gt;Running and Monitoring the Node&lt;/h2&gt;

&lt;p&gt;Now it just a matter of running your node pointing to the configuration
files above.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;run&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;run0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#run0&quot; id=&quot;run0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;run1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#run1&quot; id=&quot;run1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;runContent&quot;&gt;&lt;div aria-labelledby=&quot;run0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;run0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-node run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--topology&lt;/span&gt; ~/testnet-node/config/topology.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--database-path&lt;/span&gt; ~/testnet-node/db/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--socket-path&lt;/span&gt; ~/testnet-node/socket/node.socket &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--host-addr&lt;/span&gt; 0.0.0.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 3001 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; ~/testnet-node/config/config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;run1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;run1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-node run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--topology&lt;/span&gt; ~/node/config/topology.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--database-path&lt;/span&gt; ~/node/db/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--socket-path&lt;/span&gt; ~/node/socket/node.socket &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--host-addr&lt;/span&gt; 0.0.0.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--port&lt;/span&gt; 3001 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; ~/node/config/config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are running the node for the first time it will need to fully
synchronise with the blockchain. Verify that the running node process is
exposing its internal metrics by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl localhost:12798/metrics | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; epoch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see the expected Epoch and Slot by going to 
&lt;a href=&quot;https://testnet.adatools.io/&quot;&gt;testnet.adatools.io&lt;/a&gt; or visiting
&lt;a href=&quot;https://pooltool.io/&quot;&gt;pooltool.io&lt;/a&gt; and clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAINNET&lt;/code&gt; button
at the bottom panel until it changes to a red &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TESTNET&lt;/code&gt; button.&lt;/p&gt;

&lt;h2 id=&quot;interacting-with-the-node-using-cardano-cli&quot;&gt;Interacting with the Node using cardano-cli&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; binary that is copied to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local/bin&lt;/code&gt; 
path is the main way to interact with your local Cardano node. 
You can run the following commands to familiarise yourself.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;interact&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;interact0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#interact0&quot; id=&quot;interact0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;interact1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#interact1&quot; id=&quot;interact1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;interactContent&quot;&gt;&lt;div aria-labelledby=&quot;interact0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;interact0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Getting the current tip&lt;/span&gt;
cardano-cli query tip &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063

&lt;span class=&quot;c&quot;&gt;# Export the protocol parameters to file protocol.json&lt;/span&gt;
cardano-cli query protocol-parameters &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; protocol.json 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;interact1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;interact1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Getting the current tip&lt;/span&gt;
cardano-cli query tip &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Export the protocol parameters to file protocol.json&lt;/span&gt;
cardano-cli query protocol-parameters &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; protocol.json 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.cardano.org/docs/get-started/installing-cardano-node/&quot;&gt;Installing cardano-node and cardano-cli from source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.cardano.org/docs/get-started/running-cardano&quot;&gt;How to run cardano-node&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/input-output-hk/cardano-node&quot;&gt;cardano-node GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cardano.org/new-to-cardano/cardano-nodes&quot;&gt;Cardano Nodes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=d_3J8MgyZnc&quot;&gt;Cardano Node Local VM Setup Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-cardano-keys-and-addresses&quot;&gt;Create Cardano Keys and Addresses&lt;/h2&gt;
&lt;p&gt;Now that you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; and a running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-node&lt;/code&gt;, continue to &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/keys-and-addresses/&quot;&gt;Keys and Addresses ➡️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">As a developer the best starting point to Cardano is to get a good understanding of the Cardano node. This knowledge is essential whether you want to build DApps, wallets, integration tools, mint custom tokens or operate your own stake pool. As mentioned in the previous article, the full node is open for everyone to run and we strongly encourage every developer to learn how to do it.</summary></entry><entry><title type="html">Wallet Basics: Keys and Addresses</title><link href="https://learn.lovelace.academy//getting-started/gs04-keys-and-addresses/" rel="alternate" type="text/html" title="Wallet Basics: Keys and Addresses" /><published>2021-11-16T00:00:00+00:00</published><updated>2021-06-10T00:00:00+00:00</updated><id>https://learn.lovelace.academy//getting-started/gs04-keys-and-addresses</id><content type="html" xml:base="https://learn.lovelace.academy//getting-started/gs04-keys-and-addresses/">&lt;p&gt;Keys and addresses are cryptographic entities at the heart of all information flow in Cardano and other blockchains. There are &lt;a href=&quot;https://cips.cardano.org/cips/cip5/&quot;&gt;many different types of keys&lt;/a&gt; in Cardano, but to get started we will focus on the &lt;strong&gt;address keys&lt;/strong&gt; and their derived addresses on the right section of the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/ilap/ShelleyStuffs/raw/master/images/ShelleyKeyAndAddresses.png&quot; alt=&quot;&quot; /&gt;
Image courtesy of &lt;a href=&quot;https://github.com/ilap&quot;&gt;ilap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📝 &lt;em&gt;Following the principles of &lt;a href=&quot;https://www.blockchain-council.org/blockchain/how-does-blockchain-use-public-key-cryptography/&quot;&gt;public key/asymmetric cryptography&lt;/a&gt;, the terms &lt;strong&gt;keys&lt;/strong&gt; and &lt;strong&gt;key pairs&lt;/strong&gt; can be used interchangeably for the rest of this guide. In particular Cardano uses &lt;a href=&quot;https://en.wikipedia.org/wiki/EdDSA#Ed25519&quot;&gt;Ed25519&lt;/a&gt; key pairs consisting of a private signing key and a public verification key.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;goals&quot;&gt;Goals&lt;/h3&gt;
&lt;p&gt;Create address key pairs and their corresponding addresses to receive ADA and other custom tokens.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; executable binary from our previous post &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/running-a-full-node/&quot;&gt;Running a Full Cardano Node&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Address keys are used to derive addresses, which are destinations for values from transaction outputs. This strict association means the only way to &lt;em&gt;unlock&lt;/em&gt; the ability to spend/withdraw values at these addresses is through a signature provided by the private signing key. This simple premise safeguards all the values from theft or confiscation.&lt;/p&gt;

&lt;p&gt;Another powerful feature arises from the fact that these cryptographic
entities can be created without connecting to or interacting with the network. The de-coupling of these entities from the network
allows any one, even those without an internet connection, to create keys and their corresponding addresses that can receive ADA/custom tokens.&lt;/p&gt;

&lt;h2 id=&quot;address-keys&quot;&gt;Address Keys&lt;/h2&gt;

&lt;p&gt;Two main types of address keys are used within Cardano:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Payment Keys&lt;/strong&gt;: For creating payment addresses to receive ADA/custom tokens, and signing transactions
to spend ADA/custom tokens from these payment addresses&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stake Keys&lt;/strong&gt;: For creating stake/reward addresses, delegating
stake, withdrawing ADA rewards from stake addresses and registering
stake pools. Also used with payment keys to create base payment addresses with staking rights.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;creating-payment-keys&quot;&gt;Creating Payment Keys&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address key-gen &lt;span class=&quot;nt&quot;&gt;--verification-key-file&lt;/span&gt; payment.vkey &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; payment.skey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create two files, the private signing key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payment.skey&lt;/code&gt; and the
public verification key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payment.vkey&lt;/code&gt; in the current directory.&lt;/p&gt;

&lt;blockquote class=&quot;media notice notice-danger&quot;&gt;&lt;i class=&quot;icon_ribbon_alt&quot;&gt;&lt;/i&gt;&lt;div&gt;

    &lt;p&gt;Outside of the testnets it is &lt;strong&gt;EXTREMELY&lt;/strong&gt; important to safeguard
your private signing keys.&lt;/p&gt;

    &lt;p&gt;Creation of keys should be always be done in a &lt;strong&gt;trusted air-gapped
machine&lt;/strong&gt; with a &lt;strong&gt;pristine operating system&lt;/strong&gt; (e.g. a fresh Ubuntu
&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox VM&lt;/a&gt; with no
non-base-OS software apart from a verified version of cardano-cli) and
&lt;strong&gt;no network/internet connectivity&lt;/strong&gt;. &lt;!-- Signing transactions should
also be done in the air-gapped machine containing the private keys
where signed transactions can then be transferred out via a secure
USB. At no point should the signing keys be transferred to another
machine that is not air-gapped. --&gt;&lt;/p&gt;

    &lt;p&gt;These key files can transferred to/from a secure USB (e.g. Apricorn
Aegis) when necessary to ensure a fresh pristine environment every
time. We also recommended writing down the contents of the private
keys on a physical medium to be stored securely in case of
software/hardware failure.&lt;/p&gt;

  &lt;/div&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-stake-keys&quot;&gt;Creating Stake Keys&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli stake-address key-gen --verification-key-file stake.vkey --signing-key-file stake.skey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create the private signing key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stake.skey&lt;/code&gt; and the public
verification key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stake.vkey&lt;/code&gt; in the current directory.&lt;/p&gt;

&lt;h2 id=&quot;addresses&quot;&gt;Addresses&lt;/h2&gt;

&lt;p&gt;The address keys above are then used to create two main types of addresses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Payment addresses&lt;/strong&gt;: To receive ADA/custom tokens&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stake/Reward addresses&lt;/strong&gt;: To receive ADA staking rewards (automatically)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are encoded representations of public verification address key(s) concatenated with other metadata (see
different address types in the image above) including the network in
which they are valid for (e.g. –mainnet, –testnet-magic 1097911063,
etc.)&lt;/p&gt;

&lt;h3 id=&quot;creating-a-payment-address&quot;&gt;Creating a Payment Address&lt;/h3&gt;

&lt;p&gt;Payment addresses are generally created using &lt;strong&gt;both&lt;/strong&gt; payment and staking
verification keys to create an address known as &lt;a href=&quot;https://docs.cardano.org/core-concepts/cardano-addresses#baseaddresses&quot;&gt;base address&lt;/a&gt;. The act of
re-using the same stake key to generate multiple payment addresses
allow all the ADA across these addresses to be automatically staked to the
same designated stake pool.&lt;/p&gt;

&lt;p&gt;However it is also possible to create
&lt;a href=&quot;https://docs.cardano.org/core-concepts/cardano-addresses#enterpriseaddresses&quot;&gt;enterprise
addresses&lt;/a&gt;,
a term for a non-staking payment address, by excluding the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stake-verification-key-file&lt;/code&gt; parameter below.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;paymentaddresses&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;paymentaddresses0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#paymentaddresses0&quot; id=&quot;paymentaddresses0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;paymentaddresses1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#paymentaddresses1&quot; id=&quot;paymentaddresses1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;paymentaddressesContent&quot;&gt;&lt;div aria-labelledby=&quot;paymentaddresses0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;paymentaddresses0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--payment-verification-key-file&lt;/span&gt; payment.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--stake-verification-key-file&lt;/span&gt; stake.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;paymentaddresses1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;paymentaddresses1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--payment-verification-key-file&lt;/span&gt; payment.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--stake-verification-key-file&lt;/span&gt; stake.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-a-stakereward-address&quot;&gt;Creating a Stake/Reward Address&lt;/h3&gt;

&lt;p&gt;A unique stake address is generated from a stake verification key.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;stakeaddresses&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;stakeaddresses0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#stakeaddresses0&quot; id=&quot;stakeaddresses0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;stakeaddresses1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#stakeaddresses1&quot; id=&quot;stakeaddresses1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;stakeaddressesContent&quot;&gt;&lt;div aria-labelledby=&quot;stakeaddresses0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;stakeaddresses0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli stake-address build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--stake-verification-key-file&lt;/span&gt; stake.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; stake.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;stakeaddresses1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;stakeaddresses1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli stake-address build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--stake-verification-key-file&lt;/span&gt; stake.vkey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; stake.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.cardano.org/core-concepts/cardano-addresses&quot;&gt;Cardano Docs: Cardano addresses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.cardano.org/docs/stake-pool-course/handbook/keys-addresses/&quot;&gt;Cardano Developers: Creating Keys and Addresses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learnmeabitcoin.com/beginners/keys_addresses&quot;&gt;Learn me a bitcoin: Keys and Addresses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-your-first-transaction-in-cardano&quot;&gt;Build Your First Transaction in Cardano&lt;/h2&gt;
&lt;p&gt;With your newly created keys and addresses you can build, sign and
submit transactions to learn about &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/transactions-utxo-and-metadata/&quot;&gt;Transactions: UTxO and Metadata ➡️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">Keys and addresses are cryptographic entities at the heart of all information flow in Cardano and other blockchains. There are many different types of keys in Cardano, but to get started we will focus on the address keys and their derived addresses on the right section of the image below.</summary></entry><entry><title type="html">Transactions: UTxO and Metadata</title><link href="https://learn.lovelace.academy//getting-started/gs05-transactions-utxo-and-metadata/" rel="alternate" type="text/html" title="Transactions: UTxO and Metadata" /><published>2021-11-16T00:00:00+00:00</published><updated>2021-11-16T00:00:00+00:00</updated><id>https://learn.lovelace.academy//getting-started/gs05-transactions-utxo-and-metadata</id><content type="html" xml:base="https://learn.lovelace.academy//getting-started/gs05-transactions-utxo-and-metadata/">&lt;p&gt;Transactions are the single most important unit in blockchains. They signify the creation or transfer of all values within it, contains verifiable cryptographic proof of their validity, and make up a significant payload of every block appended to it. Transactions and their metadata are &lt;strong&gt;immutable and 
last the lifetime of the blockchain&lt;/strong&gt;, so once appended and accepted by 
the majority of the network, cannot be altered or deleted without a 
major coordinated event like a hard fork.&lt;/p&gt;

&lt;h3 id=&quot;goals&quot;&gt;Goals&lt;/h3&gt;
&lt;p&gt;This guide will help you understand the UTxO accounting model. You will then build, sign and submit your first transaction with metadata using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;From our previous post &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/running-a-full-node/&quot;&gt;Running a Full Cardano Node&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; binary&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-node&lt;/code&gt; binary that is actively running and fully synchronised&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From our previous post &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/keys-and-addresses/&quot;&gt;Wallet Basics: Keys and Addresses
&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Payment address key pair files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payment.skey&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payment.vkey&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Payment base address file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payment.addr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;h3 id=&quot;the-utxo-accounting-model&quot;&gt;The UTxO Accounting Model&lt;/h3&gt;

&lt;p&gt;Cardano, like Bitcoin and Ergo, uses the UTxO accounting model to signify the flow of values from transactions. UTxO stands for &lt;strong&gt;U&lt;/strong&gt; nspent &lt;strong&gt;Tx&lt;/strong&gt; ransaction &lt;strong&gt;O&lt;/strong&gt; utput. A transaction at its core is a set of inputs and outputs, where inputs are consumed/spent to produce new outputs.&lt;/p&gt;

&lt;p&gt;As opposed to an accounts-based blockchain (e.g. Ethereum) which holds
one single value representing the active balance of an address,
addresses in Cardano can hold &lt;strong&gt;multiple&lt;/strong&gt; transaction outputs, and it is up to the wallet to calculate the active balance by summing the
current set of UTxOs. This parallels with cash-based accounting where notes are used in transactions (i.e. pay and get change) and the 
holder’s active balance is the sum of all the notes in their wallet.&lt;/p&gt;

&lt;p&gt;Although it may seem like unnecessary complexity, this
model provides a more &lt;strong&gt;elegant&lt;/strong&gt;, &lt;strong&gt;performant&lt;/strong&gt; and &lt;strong&gt;deterministic&lt;/strong&gt; model to
reason with the current state of the blockchain and prevent double-spending. 
We will focus on the simpler Shelley UTxO model and &lt;em&gt;expand&lt;/em&gt; on EUTxO 
(Extended UTxO) and its main benefits in &lt;a href=&quot;https://learn.lovelace.academy/fundamentals/eutxo/&quot;&gt;another article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/utxo-visual.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The UTxO model can be best visualised as an &lt;strong&gt;input-output graph&lt;/strong&gt; where inputs to
transactions (the blue squares) &lt;strong&gt;fully consume&lt;/strong&gt; outputs from previous transactions, with the values sent to one or more addresses as new outputs. 
Once the outputs are spent (the red circles), they can no longer 
be used by future transactions as inputs, and new transactions can only 
use active UTxOs (the green circles) as inputs. It is with the set of 
active UTxOs that the global active state of the blockchain is derived.&lt;/p&gt;

&lt;p&gt;Much like the law of conservation of energy, the &lt;strong&gt;sum of all inputs must be equal 
to the sum of all outputs minus the transaction fees&lt;/strong&gt;. For typical payment
transactions this usually results in “change” outputs being sent back to the payer.
This elegant model also means all active ADA and custom tokens on Cardano’s ledger can be
traced back to a transaction distributing the initial ADA supply in
the genesis block, minted ADA from transactions claiming stake rewards
or from transactions minting custom tokens.&lt;/p&gt;

&lt;h2 id=&quot;the-structure-of-a-transaction&quot;&gt;The Structure of a Transaction&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/ilap/ShelleyStuffs/raw/master/images/ShelleyTransactionChanges4Gougen.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image courtesy of &lt;a href=&quot;https://github.com/ilap&quot;&gt;ilap&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;guide-to-submitting-a-tx-sending-ada&quot;&gt;Guide to Submitting a Tx sending ADA&lt;/h2&gt;

&lt;p&gt;Cardano Wallets hide away much of the subtleties behind transactions so
in this guide we will create, sign and submit a transaction sending 100
ADA to another address using the cardano-cli.&lt;/p&gt;

&lt;h3 id=&quot;load-ada-from-testnet-faucet&quot;&gt;Load ADA from Testnet Faucet&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://testnets.cardano.org/en/testnets/cardano/tools/faucet/&quot;&gt;testnet
faucet&lt;/a&gt;
to send ADA to the payment address generated in our article &lt;a href=&quot;https://learn.lovelace.academy/getting-started/keys-and-addresses/&quot;&gt;Wallet
Basics: Keys and
Addresses&lt;/a&gt;. You
can see your payment address by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-unspent-transaction-outputs-for-address&quot;&gt;Query Unspent Transaction Outputs for Address&lt;/h3&gt;

&lt;p&gt;After a short while (minute or less) you can verify the funds from the
faucet have arrived in your payment.addr by running the following:&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;queryutxo&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;queryutxo0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#queryutxo0&quot; id=&quot;queryutxo0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;queryutxo1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#queryutxo1&quot; id=&quot;queryutxo1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;queryutxoContent&quot;&gt;&lt;div aria-labelledby=&quot;queryutxo0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;queryutxo0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;UTXO0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;UTXO0H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UTXO0I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 2p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UTXO0V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;queryutxo1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;queryutxo1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;UTXO0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;UTXO0H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UTXO0I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 2p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UTXO0V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-z0-9]+'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3p&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It will store the details for the UTxO of that transaction in the shell variables
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UTXO0H&lt;/code&gt;(transaction ID)&lt;/strong&gt;, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UTXO0I&lt;/code&gt;(transaction output index)&lt;/strong&gt; and &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UTXO0V&lt;/code&gt;(transaction output value)&lt;/strong&gt;. These variables will be used later when we are building the raw transaction within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tx-in&lt;/code&gt; input parameter.&lt;/p&gt;

&lt;h3 id=&quot;create-destination-payment-address&quot;&gt;Create Destination Payment Address&lt;/h3&gt;

&lt;p&gt;Create a new set of address keys and a payment address for the destination of this transaction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination_payment.addr&lt;/code&gt;.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;addrgen&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;addrgen0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#addrgen0&quot; id=&quot;addrgen0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;addrgen1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#addrgen1&quot; id=&quot;addrgen1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;addrgenContent&quot;&gt;&lt;div aria-labelledby=&quot;addrgen0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;addrgen0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address key-gen &lt;span class=&quot;nt&quot;&gt;--verification-key-file&lt;/span&gt; destination_payment.vkey &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; destination_payment.skey

cardano-cli address build &lt;span class=&quot;nt&quot;&gt;--payment-verification-key-file&lt;/span&gt; destination_payment.vkey &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; destination_payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;addrgen1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;addrgen1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli address key-gen &lt;span class=&quot;nt&quot;&gt;--verification-key-file&lt;/span&gt; destination_payment.vkey &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; destination_payment.skey

cardano-cli address build &lt;span class=&quot;nt&quot;&gt;--payment-verification-key-file&lt;/span&gt; destination_payment.vkey &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; destination_payment.addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;📝 &lt;em&gt;Built without any stake keys, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination_payment.addr&lt;/code&gt; is a basic enterprise addresses with no staking rights&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-metadata-json-file-optional&quot;&gt;Create Metadata JSON File (Optional)&lt;/h3&gt;

&lt;p&gt;We can attach up to 16kB of structured metadata to our transaction which will be
stored and immutable for as long as the blockchain exists. The easiest 
approach is to create a JSON file and specify it when building the transaction.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; metadata.json &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; 
{
  &quot;14141342&quot;: {
      &quot;ex&quot;: &quot;Lovelace Academy|Getting Started|Transactions: UTxO and Metadata&quot;,
      &quot;v&quot; : &quot;6&quot;,
      &quot;ts&quot;: &quot;2021-10-08T16:10:34Z&quot;
  },
  &quot;14145256&quot;: {
      &quot;h&quot;: &quot;D9FCBD0EF020D1E3E3032A481814A4B8491D06323933EA708C2C62F90FF83567&quot;
  }
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The top level keys of the JSON object must be string representations of a
64bit integer and it is recommended to check against existing values in the 
&lt;a href=&quot;https://github.com/cardano-foundation/CIPs/blob/master/CIP-0010/registry.json&quot;&gt;official metadata registry&lt;/a&gt; 
to avoid conflicts.&lt;/p&gt;

&lt;p&gt;Although negligible for small JSON files as our example above, 
storing metadata will incur an additional fee based on its size. 
You can verify the difference in fees by excluding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--metadata-json-file&lt;/code&gt;
parameter when building the raw transactions below.&lt;/p&gt;

&lt;p&gt;For more information please refer to the 
&lt;a href=&quot;https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/tx-metadata.md#transaction-metadata&quot;&gt;Transaction Metadata&lt;/a&gt; 
documentation.&lt;/p&gt;

&lt;h3 id=&quot;draft-transaction-to-calculate-fees&quot;&gt;Draft Transaction to Calculate Fees&lt;/h3&gt;

&lt;p&gt;Calculating transaction fees must always refer to the latest version of the Cardano protocol parameters which can be retrieved by running:&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;protocolparams&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;protocolparams0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#protocolparams0&quot; id=&quot;protocolparams0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;protocolparams1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#protocolparams1&quot; id=&quot;protocolparams1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;protocolparamsContent&quot;&gt;&lt;div aria-labelledby=&quot;protocolparams0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;protocolparams0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli query protocol-parameters &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; protocol.json 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;protocolparams1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;protocolparams1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli query protocol-parameters &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; protocol.json 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Calculating fees for a transaction requires you to first create a draft
transaction following a similar structure to the real transaction. Note
that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tx-in&lt;/code&gt; uses the shell variables from the payment.addr UTxO query three steps above, follows the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{utxo_tx_hash}#{utxo_tx_output_index}&lt;/code&gt; and &lt;em&gt;can&lt;/em&gt; have multiple entries. 
Also note &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tx-out&lt;/code&gt; parameters sending 100 ADA (100000000 lovelaces) 
to the destination address and 900ADA (900000000 lovelaces) back to the payment address as change. Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tx-out&lt;/code&gt; follows the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{output_address}+{lovelace_value}&lt;/code&gt;.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;drafttx&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;drafttx0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#drafttx0&quot; id=&quot;drafttx0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;drafttx1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#drafttx1&quot; id=&quot;drafttx1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;drafttxContent&quot;&gt;&lt;div aria-labelledby=&quot;drafttx0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;drafttx0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;draft.txraw 2&amp;gt; /dev/null
cardano-cli transaction build-raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0H&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$UTXO0I \&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;destination_payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+100000000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+900000000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--metadata-json-file&lt;/span&gt; metadata.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--invalid-hereafter&lt;/span&gt; 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--fee&lt;/span&gt; 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; draft.txraw
&lt;span class=&quot;nv&quot;&gt;FEE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli transaction calculate-min-fee &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; draft.txraw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-in-count&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out-count&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--witness-count&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--protocol-params-file&lt;/span&gt; protocol.json | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[0-9]+'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Fee: &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;drafttx1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;drafttx1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;draft.txraw 2&amp;gt; /dev/null
cardano-cli transaction build-raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0H&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$UTXO0I \&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;destination_payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+100000000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+900000000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--metadata-json-file&lt;/span&gt; metadata.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--invalid-hereafter&lt;/span&gt; 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--fee&lt;/span&gt; 0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; draft.txraw
&lt;span class=&quot;nv&quot;&gt;FEE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli transaction calculate-min-fee &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; draft.txraw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-in-count&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-out-count&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--witness-count&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--protocol-params-file&lt;/span&gt; protocol.json | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[0-9]+'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Fee: &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;raw-transaction-with-metadata&quot;&gt;Raw Transaction with Metadata&lt;/h3&gt;

&lt;p&gt;With the fee we can now calculate the correct amount of change ADA to be
sent back to the payment address. We can also define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--invalid-hereafter&lt;/code&gt; parameter to
define how long this transaction is valid for (denoted by the current
slot tip of the chain + 600 seconds) before it is rejected by the
network.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;realtx&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;realtx0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#realtx0&quot; id=&quot;realtx0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;realtx1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#realtx1&quot; id=&quot;realtx1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;realtxContent&quot;&gt;&lt;div aria-labelledby=&quot;realtx0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;realtx0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CTIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli query tip &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .slot&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CTIP&lt;/span&gt; + 600&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 10 minutes &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CHANGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0V&lt;/span&gt; - 100000000 - &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
cardano-cli transaction build-raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0H&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$UTXO0I \&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;destination_payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+100000000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANGE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--metadata-json-file&lt;/span&gt; metadata.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--invalid-hereafter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TTL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--fee&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; sendtx.txraw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;realtx1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;realtx1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CTIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;cardano-cli query tip &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; | jq &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .slot&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CTIP&lt;/span&gt; + 600&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 10 minutes &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CHANGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0V&lt;/span&gt; - 100000000 - &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 
cardano-cli transaction build-raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$UTXO0H&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#$UTXO0I \&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;destination_payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+100000000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tx-out&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;+&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANGE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--metadata-json-file&lt;/span&gt; metadata.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--invalid-hereafter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TTL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--fee&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FEE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; sendtx.txraw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;view-transaction&quot;&gt;View Transaction&lt;/h3&gt;
&lt;p&gt;You can view the friendly output of your transaction by running&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction view &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; sendtx.txraw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;📝 &lt;em&gt;Note all the other fields in the transaction and refer back to the &lt;a href=&quot;#the-structure-of-a-transaction&quot;&gt;Structure of a Transaction Image&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;signing-a-transaction&quot;&gt;Signing a Transaction&lt;/h3&gt;

&lt;p&gt;With the previously generated payment private signing key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payment.skey&lt;/code&gt;
we can sign the transaction to prove consent to spend the ADA as the
holder of the keys to the payment address. Note that this has to be done
offline in an air-gapped machine outside of the testnets.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;signtx&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;signtx0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#signtx0&quot; id=&quot;signtx0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;signtx1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#signtx1&quot; id=&quot;signtx1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;signtxContent&quot;&gt;&lt;div aria-labelledby=&quot;signtx0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;signtx0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction sign &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; sendtx.txraw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; payment.skey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; sendtx.txsigned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;signtx1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;signtx1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction sign &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; sendtx.txraw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--signing-key-file&lt;/span&gt; payment.skey &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--out-file&lt;/span&gt; sendtx.txsigned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;get-transaction-id&quot;&gt;Get Transaction ID&lt;/h3&gt;
&lt;p&gt;You can also get the transaction ID (aka Tx Hash) of your transaction before it is submitted by running the following commands.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction txid &lt;span class=&quot;nt&quot;&gt;--tx-file&lt;/span&gt; sendtx.txsigned

&lt;span class=&quot;c&quot;&gt;# Alternatively for the unsigned txraw file&lt;/span&gt;
cardano-cli transaction txid &lt;span class=&quot;nt&quot;&gt;--tx-body-file&lt;/span&gt; sendtx.txraw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;submitting-a-transaction&quot;&gt;Submitting a Transaction&lt;/h3&gt;

&lt;p&gt;With the signed transaction we can now submit it to the rest of the
blockchain network. Once successfully submitted it will propagate across
all the nodes in the network residing in their mem pools until bundled
onto the next available block by a stake pool node.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;submittx&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;submittx0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#submittx0&quot; id=&quot;submittx0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;submittx1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#submittx1&quot; id=&quot;submittx1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;submittxContent&quot;&gt;&lt;div aria-labelledby=&quot;submittx0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;submittx0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction submit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-file&lt;/span&gt; sendtx.txsigned &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;submittx1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;submittx1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cardano-cli transaction submit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tx-file&lt;/span&gt; sendtx.txsigned &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;verify-the-transaction-result&quot;&gt;Verify the Transaction Result&lt;/h3&gt;

&lt;p&gt;You can query the payment addresses to verify that the 100 ADA has indeed
been sent successfully. This might take some time in the testnet for the submitted
transaction to be bundled to a block by an active stake pool.&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs mb-3&quot; data-tab=&quot;verifytx&quot; role=&quot;tablist&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;verifytx0&quot; aria-selected=&quot;true&quot; class=&quot;nav-link active&quot; data-toggle=&quot;tab&quot; href=&quot;#verifytx0&quot; id=&quot;verifytx0-tab&quot; role=&quot;tab&quot;&gt;Testnet&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;nav-item&quot;&gt;&lt;a aria-controls=&quot;verifytx1&quot; aria-selected=&quot;false&quot; class=&quot;nav-link&quot; data-toggle=&quot;tab&quot; href=&quot;#verifytx1&quot; id=&quot;verifytx1-tab&quot; role=&quot;tab&quot;&gt;Mainnet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot; id=&quot;verifytxContent&quot;&gt;&lt;div aria-labelledby=&quot;verifytx0-tab&quot; class=&quot;tab-pane fade show active&quot; id=&quot;verifytx0&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The source payment address with 899 ADA&lt;/span&gt;
cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063

&lt;span class=&quot;c&quot;&gt;# The destination payment address with 100 ADA&lt;/span&gt;
cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;destination_payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--testnet-magic&lt;/span&gt; 1097911063
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div aria-labelledby=&quot;verifytx1-tab&quot; class=&quot;tab-pane fade&quot; id=&quot;verifytx1&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The source payment address with 899 ADA&lt;/span&gt;
cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The destination payment address with 100 ADA&lt;/span&gt;
cardano-cli query utxo &lt;span class=&quot;nt&quot;&gt;--address&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;destination_payment.addr&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--mainnet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! You have submitted and verified your first transaction using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Alternatively you can verify the result in a testnet block explorer like &lt;a href=&quot;https://testnet.cardanoscan.io/&quot;&gt;Cardanoscan&lt;/a&gt; or &lt;a href=&quot;https://testnet.adatools.io/transactions&quot;&gt;ADATools&lt;/a&gt; through a direct search of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transaction ID&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get Transaction ID&lt;/code&gt; step above. Note for mainnet explorer URLs remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testnet&lt;/code&gt; subdomain prefix in the URL.&lt;/p&gt;

&lt;h2 id=&quot;using-block-explorers&quot;&gt;Using Block Explorers&lt;/h2&gt;

&lt;p&gt;As shown above, using a block explorer is the easiest way to navigate across all the addresses, blocks and transactions in Cardano.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://testnet.cardanoscan.io/&quot;&gt;Cardano Scan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://testnet.adatools.io/transactions&quot;&gt;ADATools - Testnet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adastat.net/&quot;&gt;ADA Stat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adaex.org/&quot;&gt;ADAex.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blockchair.com/cardano&quot;&gt;Blockchair: Cardano&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pool.pm/&quot;&gt;Pool.pm (toggle TXs)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://explorer.cardano.org/&quot;&gt;Cardano Blockchain Explorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-cardano-developer-vocaulary&quot;&gt;The Cardano Developer Vocaulary&lt;/h2&gt;
&lt;p&gt;Before diving deeper into development, it is important to understand some key terms and concepts of the &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/getting-started/cardano-developer-vocabulary/&quot;&gt;Cardano Developer Vocabulary
 ➡️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">Transactions are the single most important unit in blockchains. They signify the creation or transfer of all values within it, contains verifiable cryptographic proof of their validity, and make up a significant payload of every block appended to it. Transactions and their metadata are immutable and last the lifetime of the blockchain, so once appended and accepted by the majority of the network, cannot be altered or deleted without a major coordinated event like a hard fork.</summary></entry><entry><title type="html">Cardano Developer Vocabulary</title><link href="https://learn.lovelace.academy//getting-started/gs06-cardano-developer-vocabulary/" rel="alternate" type="text/html" title="Cardano Developer Vocabulary" /><published>2021-11-16T00:00:00+00:00</published><updated>2021-06-07T00:00:00+00:00</updated><id>https://learn.lovelace.academy//getting-started/gs06-cardano-developer-vocabulary</id><content type="html" xml:base="https://learn.lovelace.academy//getting-started/gs06-cardano-developer-vocabulary/">&lt;p&gt;Even seasoned developers can find the plethora of new terms associated with Blockchain development intimidating and at times plain confusing or cryptic. To address these pain points we have created the &lt;strong&gt;Cardano Developer Vocabulary&lt;/strong&gt;, a concise glossary to explain the most important yet commonly mistaken terms grouped by major concepts.&lt;/p&gt;

&lt;h2 id=&quot;time&quot;&gt;Time&lt;/h2&gt;
&lt;p&gt;Moments in time across Cardano are generally specified using incrementing integers. For example to-the-second precise units called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Slots&lt;/code&gt; and five-day windows known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epochs&lt;/code&gt;. Last but not least these moments reside within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eras&lt;/code&gt;, which are simply text labels for significant Cardano network milestones. For example, &lt;span class=&quot;tooltips_one&quot; data-toggle=&quot;tooltip&quot; data-placement=&quot;top&quot; title=&quot;9:00AM UTC on November 3rd&quot;&gt;2021-11-03T09:00:00Z in ISO 8601 format&lt;/span&gt; is Slot 44363709, in Epoch 300 of the Alonzo Era.&lt;/p&gt;
&lt;h3 id=&quot;slot&quot;&gt;Slot&lt;/h3&gt;
&lt;p&gt;At the current configuration a slot is a unit of time increasing at a rate of one every second. Slots are used to define precise moments in time such as those used in &lt;a href=&quot;https://learn.lovelace.academy/tokens/minting-policies/#multisig-policies&quot;&gt;time-locked multisig policies&lt;/a&gt;, an expiration for transactions, the current tip of the chain or points in time when a stake pool should produce blocks.&lt;/p&gt;
&lt;h3 id=&quot;epoch&quot;&gt;Epoch&lt;/h3&gt;
&lt;p&gt;An epoch is currently configured as a five-day window (i.e. 432,000 slots) and key activities occur at the start of every new epoch. For example the snapshot of all the ADA staked across the network is captured to determine the future block schedule, rewards are distributed to stake addresses for previous epochs, and protocol parameter updates are promoted. Some epoch transitions can even herald major network upgrade events (HFCs) through era transitions.&lt;/p&gt;

&lt;h2 id=&quot;data-formats&quot;&gt;Data Formats&lt;/h2&gt;
&lt;p&gt;Cardano uses data serialisation and encoding formats that aren’t typically used across the software industry (e.g. popular formats such as JSON, ProtoBuf, CSV, etc.) but are chosen due to their compact size, computational efficiency and compatibility with cryptographic functions.&lt;/p&gt;
&lt;h3 id=&quot;cbor&quot;&gt;CBOR&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt; oncise &lt;strong&gt;B&lt;/strong&gt; inary &lt;strong&gt;O&lt;/strong&gt; bject &lt;strong&gt;R&lt;/strong&gt; epresentation is a binary serialisation format (similar to BSON, ProtoBuf, FlatBuffers) that plays nice with cryptographic signing and encryption. It is used to serialise most of the data between Cardano components.&lt;/p&gt;
&lt;h3 id=&quot;cddl&quot;&gt;CDDL&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt; oncise &lt;strong&gt;D&lt;/strong&gt; ata &lt;strong&gt;D&lt;/strong&gt; efinition &lt;strong&gt;L&lt;/strong&gt; anguage defines a human-readable schema for CBOR types. This is similar to JSON Schema or ProtoBuf structures in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.proto&lt;/code&gt; file and can be used to define cross-boundary protocol contracts.&lt;/p&gt;
&lt;h3 id=&quot;bech32&quot;&gt;BECH32&lt;/h3&gt;
&lt;p&gt;BECH32 (not to be confused with &lt;em&gt;BIP32&lt;/em&gt; in the Improvement Proposals section below) is a human-readable encoding format with &lt;a href=&quot;https://cips.cardano.org/cips/cip5/&quot;&gt;standardised prefixes&lt;/a&gt; such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addr1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asset1&lt;/code&gt;. It is used across Cardano for end-user facing objects such as keys, addresses and native assets.&lt;/p&gt;
&lt;h3 id=&quot;cbor-hex&quot;&gt;CBOR Hex&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cardano-cli&lt;/code&gt; also generates and accepts JSON-formatted key and certificate files with the fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cborHex&lt;/code&gt;. As the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cborHex&lt;/code&gt; field’s name suggests, it is a hex (i.e. Base16) representation of the key or certificate’s CBOR binary.&lt;/p&gt;

&lt;h2 id=&quot;cryptography&quot;&gt;Cryptography&lt;/h2&gt;
&lt;p&gt;As with most Blockchains, two main cryptographic primitives are used, &lt;strong&gt;hash functions&lt;/strong&gt; and &lt;strong&gt;public key or asymmetric cryptography&lt;/strong&gt;. Specific algorithms are used below.&lt;/p&gt;
&lt;h3 id=&quot;blake2b&quot;&gt;Blake2b&lt;/h3&gt;
&lt;p&gt;Cardano uses the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7693&quot;&gt;Blake2b&lt;/a&gt; as a fast hashing algorithm to generate hash digests (&lt;em&gt;unique&lt;/em&gt; fixed-length fingerprints) of commonly used objects in Cardano. In particular Blake2b-160 for native asset IDs, Blake2b-224 for keys or scripts, Blake2b-256 for transactions and Blake2b-512 for wallet checksums.&lt;/p&gt;
&lt;h3 id=&quot;ed25519&quot;&gt;Ed25519&lt;/h3&gt;
&lt;p&gt;As mentioned in our page &lt;a href=&quot;https://learn.lovelace.academy/getting-started/keys-and-addresses/&quot;&gt;Wallet Basics: Keys and Addresses
&lt;/a&gt;, Cardano uses &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8032&quot;&gt;Ed25519&lt;/a&gt; private signing and public verification key pairs heavily for the digital signatures validating transactions and blocks.&lt;/p&gt;

&lt;h2 id=&quot;improvement-proposals&quot;&gt;Improvement Proposals&lt;/h2&gt;
&lt;p&gt;The Blockchain industry is built on top of innovative standards (BIP/EIP/CIP/etc.) that arose out of documented improvement proposals from different ecosystems.&lt;/p&gt;
&lt;h3 id=&quot;bip-and-eip&quot;&gt;BIP and EIP&lt;/h3&gt;
&lt;p&gt;Standards that came from &lt;a href=&quot;https://github.com/bitcoin/bips&quot;&gt;&lt;strong&gt;B&lt;/strong&gt;itcoin &lt;strong&gt;I&lt;/strong&gt;mprovement &lt;strong&gt;P&lt;/strong&gt;roposals&lt;/a&gt; or &lt;a href=&quot;https://github.com/ethereum/EIPs/tree/master/EIPS&quot;&gt;&lt;strong&gt;E&lt;/strong&gt;thereum &lt;strong&gt;I&lt;/strong&gt;mprovement &lt;strong&gt;P&lt;/strong&gt;roposals&lt;/a&gt;. Notable ones include &lt;strong&gt;BIP32&lt;/strong&gt;, &lt;strong&gt;BIP39&lt;/strong&gt; and &lt;strong&gt;BIP44&lt;/strong&gt; that laid the foundation for cross-chain wallets through recovery phrases, root keys and hierarchical structured child keys/addresses. It is also worthwhile knowing EIPs such as &lt;strong&gt;EIP20&lt;/strong&gt; and &lt;strong&gt;EIP721&lt;/strong&gt; which define the ERC20 and ERC721 token standards for tokens and non-fungible tokens in Ethereum.&lt;/p&gt;
&lt;h3 id=&quot;cip&quot;&gt;CIP&lt;/h3&gt;
&lt;p&gt;Standards that came from Cardano. Notable ones are &lt;strong&gt;CIP25&lt;/strong&gt; for the NFT Metadata standard and &lt;strong&gt;CIP5&lt;/strong&gt; for common BECH32 prefixes (described above in &lt;a href=&quot;#data-formats&quot;&gt;Data Formats&lt;/a&gt;) . See the &lt;a href=&quot;https://github.com/cardano-foundation/CIPs&quot;&gt;full list here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;🚧 &lt;em&gt;More content coming soon. Still confused about some other terms? We would love your feedback on &lt;a href=&quot;https://discord.com/invite/cqQBvBpXzR&quot;&gt;Discord&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;learn-about-cardanos-native-tokens&quot;&gt;Learn about Cardano’s Native Tokens&lt;/h2&gt;
&lt;p&gt;Now you can learn how to mint tokens on Cardano. Continue to &lt;strong&gt;&lt;a href=&quot;https://learn.lovelace.academy/tokens/introduction-to-tokens/&quot;&gt;Introduction to Tokens
 ➡️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="Getting Started" /><summary type="html">Even seasoned developers can find the plethora of new terms associated with Blockchain development intimidating and at times plain confusing or cryptic. To address these pain points we have created the Cardano Developer Vocabulary, a concise glossary to explain the most important yet commonly mistaken terms grouped by major concepts.</summary></entry></feed>